<?php
// $Id$

/**
 * @file
 * Code for OpenScholar Control Panel.
 */

include_once ('cp.features.inc');

define('CP_MENU_OFF', 'off');
define('CP_MENU_MINI', 'mini');
define('CP_MENU_FULL', 'full');

/**
 * Loads an include file based on a $_GET.
 *
 * @see cp_init()
 */
function cp_invoke($hook, $args = array()) {
  // Only continues if we get a non-null return value from $_GET['cp'].
  if (!isset($_GET['cp']) || is_null($_GET['cp'])) {
    return;
  }

  module_load_include('inc', 'cp', 'includes/cp.' . $module);
  $function = 'cp_' . $module . '_' . $hook;
  if (function_exists($function)) {
    $function($args);
  }
}

/**
 * Implements hook_init().
 */
function cp_init() {
  cp_invoke('init');
}

/**
 * Implements hook_menu().
 */
function cp_menu() {
  $items = array();

  $spaces_path = drupal_get_path('module', 'spaces');

  $items["cp/build"] = array(
    'title' => 'Apps',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'spaces_features_form',
    ),
    'file' => 'spaces.admin.inc',
    'file path' => $spaces_path,
    'weight' => 10,
    'description' => t('Manage and customize your site\'s apps, layout, menus and vocabularies.')
  );

  $items["cp/build/apps"] = array(
    'title' => 'Apps',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'spaces_features_form',
    ),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'spaces.admin.inc',
    'file path' => $spaces_path,
    'weight' => 10,
    'description' => t('Manage and customize apps on your site')
  );

  $items["cp/build/taxonomy"] = array(
    'title' => 'Taxonomy',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_overview_vocabularies'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
    'description' => t('Manage your site\'s vocabularies')
  );

  $items["cp/build/taxonomy/add"] = array(
    'title' => 'Add vocabulary',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_vocabulary'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
  );

  $items["cp/build/taxonomy"] = array(
    'title' => 'Taxonomy',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_overview_vocabularies'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
    'description' => t('Manage your site\'s vocabularies')
  );

  $items["cp/build/taxonomy/add"] = array(
    'title' => 'Add vocabulary',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_vocabulary'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
  );

  // Provides a customize form for each OS App.
  $apps = spaces_features('site');
  foreach ($apps as $name => $app) {
    $items['cp/build/features/' . $name] = array(
      'title callback' => '_cp_app_settings_page_title',
      'title arguments' => array(3),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cp_app_settings_form', 3),
      'access callback' => 'spaces_access_admin',
      'file' => 'cp.pages.inc',
    );
  }

  $items['cp/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_settings_form'),
    'file' => 'cp.form.inc',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'spaces_access_admin',
    'weight' => 30,
    'description' => t('Control various settings of your site, such as making your site private or configuring your site to integrate with 3rd party services.'),
  );

  if(module_exists('contact')) {
    $items['cp/support'] = array(
      'title' => 'Support',
      'description' => 'Contact the OpenScholar support team.',
      'page callback' => 'cp_site_sitewide_contact',
      'page arguments' => array('support'),
      'access callback' => 'spaces_access_admin',
      'type' => MENU_NORMAL_ITEM,
      'weight'=> 40,
    );
  }

  $items['cp/account'] = array(
    'title' => 'Account',
    'title callback' => 'cp_user_title',
    'page callback' => 'user_page',
    'access callback' => TRUE,
    'file path' => drupal_get_path('module', 'user'),
    'file' => 'user.pages.inc',
    'weight' => 100,
    'options' => array(
      'alter' => TRUE,
      'html' => TRUE,
    ),
  );

  $items['cp/account/logout'] = array(
    'title' => 'Log out',
    'access callback' => 'user_is_logged_in',
    'page callback' => 'user_logout',
    'weight' => 10,
    'file path' => drupal_get_path('module', 'user'),
    'file' => 'user.pages.inc',
    'options' => array(
      'alter' => TRUE,
      'html' => TRUE,
    ),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function cp_menu_alter(&$items) {
  // make them all part of 'cp' menu
  foreach ($items as $path => $item) {
    if (strpos($path, 'cp') === 0) {
      if (!array_key_exists('menu_name', $item)) {
        $items[$path]['menu_name'] = 'cp';
      }

      // @todo maybe provide our own permission instead ?
      if (!array_key_exists('access callback', $item)) $items[$path]['access arguments'] = array(
        'access control panel',
      );
    }
  }
}

/**
 * Title callback for 'cp/account'.
 *
 * Changes the title of the Account link to have the user's name in it.
 */
function cp_user_title() {
  if (user_is_logged_in()) {
    return t('Hello <strong>@username</strong>', array('@username' => '' . format_username($GLOBALS['user']) . ''));
  }
  return t('Login');
}

/**
 * Implements hook_translated_menu_link_alter().
 *
 * Alters CP user links to return to the current page when finished.
 */
function cp_translated_menu_link_alter(&$link) {
  if (strpos($link['link_path'], 'cp/account') !== FALSE) {
    $link['localized_options']['query'] = drupal_get_destination();
  }
}

/**
 * Implements hook_theme().
 */
function cp_theme() {
  return array(
  	'cp-toolbar' => array(
      'render element' => 'cp_toolbar',
      'template' => 'cp-toolbar',
      'path' => drupal_get_path('module', 'cp') . '/theme',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function cp_permission() {
  return array(
    'access control panel' => array(
      'title' => t('Access Control Panel'),
    ),
  );
}

/**
 * Make a decision about the active theme
 */
function cp_custom_theme() {
  // Turn the CP theme on
  if (cp_use_cp_theme()) {
    return variable_get('os_cp_theme', 'cp_theme');
  }
}

/**
 * Returns TRUE/FALSE, whether or not to use cp theme.
 */
function cp_use_cp_theme() {
  if ((arg(0) == 'cp') ||
    (arg(0) == 'os') ||
    (arg(0) == 'media') ||
    ((arg(0) == 'node' || arg(0) == 'file') && (arg(1) == 'add' || arg(2) == 'edit' || arg(2) == 'delete'))
  ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_admin_paths().
 */
function cp_admin_paths() {
  return array('cp/build/features/*' => TRUE, 'cp/support' => TRUE);
}

/**
 * Implements hook_form_FORM_ID_alter() for spaces_features_form.
 *
 * Alters the features form in the cp to remove un-needed componentes
 */
function cp_form_spaces_features_form_alter(&$form, &$form_state, $form_id) {
  // Only alters form if we are in the OpenScholar Control Panel context.
  if (!context_isset('context', 'os_cp')) {
    return;
  }
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();

  $vsite = spaces_get_space();
  if ($vsite) {
    if (isset($vsite->controllers->variable->values['preset']['spaces_features_available'])) {
      $spaces_features_available = $vsite->controllers->variable->values['preset']['spaces_features_available'];
    }
    else {
      $spaces_features_available = FALSE;
    }
  }
  else {
    $spaces_features_available = FALSE;
  }

  foreach (array_keys($form['spaces_features']) as $app_name) {
    // Skips render array markup.
    if ($app_name[0] == '#') {
      continue;
    }

    // Removes apps that are restricted for this site type.
    if ($spaces_features_available && !in_array($app_name, $spaces_features_available)) {
      unset($form['spaces_features'][$app_name]);
      continue;
    }

    // Only displays "settings" gear-icon link for enabled & private OS Apps.
    $is_not_disabled = ((int) $form['spaces_features'][$app_name]['#default_value'] !== 0);
    if ($is_not_disabled) {
      $link = l(t('settings'), 'cp/build/features/' . $app_name);
      $form['settings'][$app_name] = array(
        '#type' => 'markup',
        '#markup' => $link,
      );
    }
    else {
      if (isset($form['settings'][$app_name]['#markup'])) {
        $form['settings'][$app_name]['#markup'] = '';
      }
    }
  }

  if (isset($form['site_frontpage'])) {
    // Allows users with administer spaces permission to change the site path
    $form['site_frontpage']['#access'] = user_access('administer spaces');
    $form['site_frontpage_path']['#access'] = user_access('administer spaces');
  }

  if (!(module_exists('vsite') && ($vsite = spaces_get_space()))) {
    return;
  }

  $form['actions']['space_overrides'] = array(
    '#markup' => l('overrides', 'node/' . $vsite->id . '/features/overrides'),
    '#weight' => 100,
    '#access' => user_access('administer spaces'),
  );
}

/**
 * Gets all the settings a module could define for a site
 *
 * There aren't enough of to have its own page.
 *
 * @see cp_settings_form()
 */
function cp_get_setting_forms() {
  $settings = module_invoke_all('cp_settings');
  drupal_alter('cp_settings', $settings);

  return $settings;
}

/**
 * Implements hook_cp_settings().
 *
 * Allows user to switch between full and mini cp menus on the front view
 */
function cp_cp_settings() {
  $setting = array();
  $setting['cp_admin_menu'] = array(
    'group' => array(
      '#title' => t('Admin Menu'),
      '#id' => 'admin-menu',
    ),
    'form' => array(
      '#type' => 'checkbox',
      '#default_value' => variable_get('cp_admin_menu', 0),
      '#title' => t('Display Admin Menu Bar'),
      '#description' => t('The admin menu bar displays at the top of the page when you are logged in as a side adminstrator. <br>
      Checking this will cause the admin menu at the top of the page now to be displayed at the top of the public view of your site as well. Only managers of your site will see this bar.'),
    ),
  );

  return $setting;
}

/**
 * Menu callback page for cp/support.
 */
function cp_site_sitewide_contact() {
  module_load_include('inc', 'contact', 'contact.pages');
  // Check to make sure the site email address are set.
  $results = db_query('SELECT cid, recipients FROM {contact} WHERE category = :category',array(':category'=>'Website feedback'))->fetchAssoc();
  if($results['recipients'] == '') {
    // The recipient email isn't set, set them.
    $query = db_select('contact', 'c');
    $query->fields('c', array('cid', 'recipients'));
    $contact_result = $query->execute();
    while($contact = $contact_result->fetchAssoc()) {
      if($contact['recipients'] == '') {
        // Update the record.
        db_update('contact') // Table name no longer needs {}
    	  ->fields(array(
     		'recipients' => variable_get('site_mail',''),
  		  ))
  		->condition('cid', $contact['cid'], '=')
  	    ->execute();
      }
    }
  }
  // Return the contact_site_form.
  $contact_site_form = drupal_get_form('contact_site_form');
  $output = "<p>Use the form below to send us your comments or report any problems you experienced using your website. We read all feedback carefully and will respond quickly.</p>";
  $output .= drupal_render($contact_site_form);
  return $output;
}

/**
 * Returns the page title for OS App Settings form pages.
 */
function _cp_app_settings_page_title($feature_name) {
  $feature = feature_load($feature_name);
  $feature_title = features_get_feature_title($feature);

  $title = t('@app Settings', array('@app' => $feature_title));
  return $title;
}

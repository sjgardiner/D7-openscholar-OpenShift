<?php
// $Id$

include_once ('os_pages.features.inc');

/**
 * Implements hook_os_app_info().
 */
function os_pages_os_app_info() {
  $apps = array();

  $apps['os_pages'] = array(
    'path' => 'pages',
  	'nodetypes' => array(
  	  'page',
    ),
  );

  return $apps;
}

/**
 * Implements hook_menu().
 */
function os_pages_menu() {
  $items = array();

  $items['os/pages/%node'] =
  $items['os/pages/%node/outline'] = array(
    'title' => 'Section Outline',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('book_admin_edit', 2),
    'access callback' => '_book_outline_access',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'book.admin.inc',
    'file path' => drupal_get_path('module', 'book'),
  );

  $items['os/pages/%node/body'] =
  $items['os/pages/%node/meta'] = array(
    'title' => 'Edit Page',
    'page callback' => 'os_pages_edit_form',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'node_access',
    'access arguments' => array('update', 2),
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function os_pages_admin_paths() {
  return array(
    'os/pages/*' => 'os/pages/*',
  );
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_pages_vsite_og_node_type_info() {
  return array(
    'page' => 'group content',
  );
}

/**
 * Implements hook_block_info().
 */
function os_pages_block_info() {
  $blocks = array();

  $blocks['main_content'] = array(
    'info' => t('Page Content'),
    'weight' => '-10',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function os_pages_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'main_content':
      $block['subject'] = '';
      $block['content'] = drupal_set_page_content();
      break;
  }

  return $block;
}

/**
 * Implements hook_block_view_alter().
 */
function os_pages_block_view_alter(&$render, $block) {
  if ($block->delta == 'os_pages_section_nav' && !empty($render['content'])) {
    $node = menu_get_object();
    $render['content']['#contextual_links']['section'] = array(
      'os/pages',
      array($node->book['bid']),
    );
  }
}

/**
 * Implements hook_menu_contextual_links_alter().
 */
function os_pages_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  if ($root_path == 'os/widget/%/%' && $router_item['map'][3] == 'main_content') {
    $node = menu_get_object();
    if(!is_object($node)) {
      return;
    }
    $links['os_pages-edit'] = menu_get_item('os/pages/'.$node->nid.'/body');
    $links = array_reverse($links, true);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function os_pages_preprocess_block(&$vars) {
  $block = $vars['block'];

  if ($block->delta == 'os_pages_section_nav') {
    $vars['classes_array'][] = 'section-nav';
  }
}

/**
 * Implements hook_os_widget().
 */
function os_pages_os_widget() {
  $widgets = array();

  $widgets['os_pages-main_content'] = array(
    'module' => 'os_pages',
    'delta' => 'main_content',
    'title' => '',
    'info' => 'Page Content',
  );

  return $widgets;
}

/**
 * Defines contexts for the page nodes
 */
function os_pages_context_custom($name) {
  if (strpos($name, 'os_pages-page-') !== FALSE) {
    $nid = str_replace('os_pages-page-', '', $name);
    $context = (object)array(
      'disabled' => FALSE,
      'api_version' => 3,
      'name' => 'os_pages-page-'.$nid,
      'description' => 'Context active on a single page.',
      'tag' => 'OpenScholar',
      'weight' => 10,
      'conditions' => array(),
      'reactions' => array(
        'block' => array(
          'blocks' => array(
            'os_pages-main_content' => array(
              'module' => 'os_pages',
              'delta' => 'main_content',
              'region' => 'content_top',
              'weight' => '-10',
            ),
          )
        )
      ),
      'condition_mode' => 0,
    );
    return $context;
  }
  elseif (strpos($name, 'os_pages-section-') !== FALSE) {
    $context = (object)array(
      'disabled' => FALSE,
      'api_version' => 3,
      'name' => $name,
      'description' => 'Context active on a group of pages.',
      'tag' => 'OpenScholar',
      'weight' => 5,
      'conditions' => array(),
      'reactions' => array(
        'block' => array(
          'blocks' => array(
            'boxes-os_pages_section_nav' => array(
              'module' => 'boxes',
              'delta' => 'os_pages_section_nav',
              'region' => 'sidebar_second',
              'weight' => '-10',
            ),
          )
        )
      ),
      'condition_mode' => 0,
    );
    return $context;
  }
}

/**
 * Implements hook_node_view().
 *
 * By manually triggering the context, we can circumvent the condition process entirely.
 * Context won't have to chug through all the contexts to process them, since none of them
 * will have reactions.
 */
function os_pages_node_view($node, $view_mode) {
  if ($node->type == 'page' && $view_mode == 'full') {
    $ctx = context_load('os_pages-page-'.$node->nid);
    if ($ctx) {
      context_set('context', $ctx->name, $ctx);
    }

    if (isset($node->book['bid']) && $ctx = context_load('os_pages-section-'.$node->book['bid'])) {
      context_set('context', $ctx->name, $ctx);
    }

    unset($node->content['book_navigation']);

    unset($node->content['links']['book']);
  }
}

/**
 * Implements hook_node_view_alter().
 */
function os_pages_node_view_alter(&$build, $type) {
  if ($build['#view_mode'] == 'full' && $build['#node']->type == 'page') {
    unset($build['#contextual_links']['node']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function os_pages_form_node_form_alter(&$form, $form_state) {
  if ($form['#node']->type != 'page') return;

  if (isset($_GET['parent_node'])) {
    $form['#book_parent_node'] = $_GET['parent_node'];
  }

  if (isset($form_state['build_info']['args'][1])) {
    $form['#after_build'][] = '_os_pages_show_portion';
  }

  /*$ignore_words = array();
  if (module_exists('pathauto')) {
    $ignore_words = variable_get('pathauto_ignore_words', PATHAUTO_IGNORE_WORDS);
    $ignore_words = explode(', ', $ignore_words);
    $ignore_words[] = '--';
  }
  $form['page_path'] = array(
    '#type' => 'machine_name',
    '#field_prefix' => url('', array()).'/',
    '#weight' => -4,
    '#machine_name' => array(
      'exists' => 'os_pages_page_path_exist',
      'source' => array('title'),
      'label' => t('Path to this post'),
      'replace_pattern' => '[^a-z0-9/-]+'.(count($ignore_words)?'|(^('.implode(' |',$ignore_words).' ))+':''),
      'replace' => '-',
    ),
    '#disabled' => isset($form['#node']->nid)?true:false,
  );*/
}

/**
 * Form after_build callback for node_form.
 *
 * @see os_pages_form_node_form_alter()
 */
function _os_pages_show_portion($form, $form_state) {
  $args = $form_state['build_info']['args'];
  $toggle = array(
    'body',
    'field_upload',
  );

  $display_toggle = false;
  switch ($args[1]) {
    case 'body':
      $display_toggle = true;
      break;
    case 'meta':
      $display_toggle = false;
      break;
  }

  foreach (element_children($form) as $c) {
    if (in_array($form[$c]['#type'], array('hidden', 'value', 'token'))) continue;

    if ($display_toggle XOR in_array($c, $toggle)) {

      $form[$c]['#prefix'] = '<div style="display:none">';
      $form[$c]['#suffix'] = '</div>';
    }
  }
  unset($form['actions']['#prefix'], $form['actions']['#suffix']);

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter() for book_admin_edit.
 */
function os_pages_form_book_admin_edit_alter(&$form, $form_state) {
  if ($form['#node']->type == 'page') {
    $form['save']['#value'] = t('Save Section Outline');
  }
}

/**
 * Implements hook_preprocess_table().
 */
function os_pages_preprocess_table(&$vars) {
  $node = menu_get_object('node', 2);
  if (isset($vars['attributes']['id']) && $vars['attributes']['id'] == 'book-outline' && $node) {
    $vars['header'] = array_slice($vars['header'], 0, 3);
    foreach ($vars['rows'] as $k => $r) {
      $vars['rows'][$k]['data'] = array_slice($r['data'], 0, 3);
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function os_pages_node_submit(&$node, $form, &$form_state) {
  if (isset($form['#book_parent_node'])) {
    // create a book out of our parent node
    $parent = $form['#book_parent_node'];
    $parent = node_load($parent);
    $parent->book['bid'] = 'new';
    book_node_update($parent);

    // $node->book has already been added to the node.
    // nothing is done if these fields are empty
    $node->book['bid'] = $parent->nid;
    $node->book['plid'] = $parent->book['mlid'];
    $node->book['menu_name'] = $parent->book['menu_name'];
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * If we're on a page node, change the Layout link to point to the right context.
 * Also, if the context is active (i.e. it exists), tell the template to use the content regions
 */
function os_pages_preprocess_page(&$page) {
  $node = menu_get_object('node');

  if ($node && isset($node->nid) && $node->type == 'page') {
    if (context_isset('context', 'os_pages-page-'.$node->nid)) {
      $page['use_content_regions'] = true;
    }

    $links = &$page['title_suffix']['controls']['section_links']['#links'];

    $section_links = array();
    $ctxs = array_keys(context_active_contexts());
    if (isset($node->book['bid'])) {
      $section = array_diff($ctxs, array('os_pages-page-'.$node->nid));

      $section_links['section-header'] = array(
        'title' => t('This Section'),
      );
      $section_links['section-layout'] = array(
        'title' => t('Layout'),
        'href' => 'cp/build/layout/'.implode('/', $section),
        'query' => drupal_get_destination(),
      );
      $section_links['page-header'] = array(
        'title' => t('This Page'),
      );
    }

    $section_links['page-layout'] = array(
      'title' => t('Layout'),
      'href' => 'cp/build/layout/'.implode('/', $ctxs),
      'query' => drupal_get_destination(),
    );
    $section_links['page-edit'] = array(
      'title' => t('Edit'),
      'href' => 'os/pages/'.$node->nid.'/meta',
      'query' => drupal_get_destination(),
    );
    $section_links['page-delete'] = array(
      'title' => t('Delete'),
      'href' => 'node/'.$node->nid.'/delete',
      'query' => array('destination' => '<front>'),
    );

    $links = $section_links;
  }

}

/**
 * Implements hook_os_add_new_links_alter().
 */
function os_pages_os_add_new_links_alter(&$links) {
  $node = menu_get_object();

  if (node_is_page($node) && $node->type == 'page') {
    if ((user_access('add content to books') || user_access('administer book outlines')) && node_access('create', 'page') && $node->status == 1 && (!isset($node->book['depth']) || $node->book['depth'] < MENU_MAX_DEPTH)) {
      $links['book_add_child'] = array(
        'title' => t('Subpage'),
        'href' => 'node/add/page',
        'query' => isset($node->book['mlid'])?array('parent' => $node->book['mlid']):array('parent_node' => $node->nid),
      );
    }
  }
}

/**
 * Page callback for 'os/pages/%node/body' and 'os/pages/%node/meta'.
 */
function os_pages_edit_form($node, $mode) {
  module_load_include('inc', 'node', 'node.pages');
  return drupal_get_form('page_node_form', $node, $mode);
}
<?php

/**
 * @file
 * Integration with OG Vocabulary.
 */

/**
 * Implements hook_menu().
 */
function vsite_vocab_menu() {
  $items = array();

  $items["cp/build/taxonomy"] = array(
    'title' => 'Taxonomy',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    //'page callback' => 'cp_taxonomy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_overview_vocabularies'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
    'description' => t('Manage your site\'s vocabularies')
  );

  $items["cp/build/taxonomy/add"] = array(
    'title' => 'Add vocabulary',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_vocabulary'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Adding custom paths to the vocabulary actions.
 */
function vsite_vocab_menu_alter(&$items) {
  $items['cp/build/taxonomy/%taxonomy_vocabulary_machine_name'] = $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name'];
  $items['cp/build/taxonomy/%taxonomy_vocabulary_machine_name/add'] = $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add'];
  $items['cp/build/taxonomy/%taxonomy_vocabulary_machine_name/edit'] = $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/edit'];
}

/**
 * Implements hook_field_create_instance().
 *
 * Add OG vocanulary field to a group-content bundle.
 */
function vsite_vocab_field_create_instance($instance) {
  if (!og_is_group_audience_field($instance['field_name'])) {
    return;
  }
  $og_field = og_fields_info(OG_VOCAB_FIELD);
  $og_field['instance']['display']['default']['label'] = 'hidden';
  $og_field['instance']['display']['default']['settings']['concatenate'] = TRUE;
  og_create_field(OG_VOCAB_FIELD, $instance['entity_type'], $instance['bundle'], $og_field);
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_vocabulary.
 *
 * 1) Limit avalible bundles to just Publc/Private bundles in OS.
 *
 * @see og_vocab_form_taxonomy_form_vocabulary_alter().
 */
function vsite_vocab_form_taxonomy_form_vocabulary_alter(&$form, $form_state) {
  if (!isset($form['og_vocab'])) {
    return;
  }

  // Hiding elements in the form.
  ctools_include('dependent');
  $form['og_vocab']['#access'] = FALSE;
  $form['machine_name']['#access'] = FALSE;
  $form['#submit'][] = 'vsite_vocab_form_taxonomy_form_vocabulary_submit';

  if (empty($form_state['vocabulary']->vid)) {
    $form['machine_name']['#element_validate'][] = 'vsite_vocab_form_taxonomy_form_vocabulary_validate';
  }

  // Init variables.
  $required = FALSE;
  $widget = 'options_select';
  $cardinality = FIELD_CARDINALITY_UNLIMITED;

  // Add description for the name.
  $form['name']['#description'] = t('The vocabulary name. E.g. "Research interests"');

  // Get enabled bundles.
  $bundles = os_get_bundles(array(1,2));

  // Loop through all of the content types and build their checkboxe's.
  $form['bundles'] = array();
  $default_bundles = array();
  foreach ($bundles as $bundle => $bundle_label) {
    $vid = !empty($form['vid']['#value']) ? $form['vid']['#value'] : 0;
    $og_vocab = og_vocab_load_og_vocab($vid, 'node', $bundle, TRUE);
    $options[$bundle] = check_plain($bundle_label);
    if (empty($og_vocab->is_new)) {
      $default_bundles[$bundle] = TRUE;
    }

    $required = !$required ? $og_vocab->settings['required'] : $required;
    $widget = $widget == 'options_select' ? $widget = $og_vocab->settings['widget_type'] : $widget;
    $cardinality = $cardinality == FIELD_CARDINALITY_UNLIMITED ? $cardinality = $og_vocab->settings['cardinality'] : $cardinality;
  }

  $form['bundles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => $options,
    '#default_value' => array_keys($default_bundles),
    '#description' => t('Select the content types to categorize using this vocabulary.'),
    '#required' => TRUE,
  );

  // Adding settings for the OG vocab settings.
  $form['required'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#description' => t('If checked, the post must be tagged / categorized with at least one term from this vocabulary.'),
    '#default_value' => $required,
  );

  $form['widget_type_autocomplete'] = array(
    '#type' => 'radios',
    '#title' => t('Type'),
    '#description' => t('Should terms be created on advanced or may be created on the fly, when adding / editing a post.'),
    '#options' => array(
      'entityreference_autocomplete' => t('Managed'),
      'entityreference_autocomplete_tags' => t('Tags style'),
    ),
    '#default_value' => in_array($widget, array('entityreference_autocomplete', 'entityreference_autocomplete_tags')) ? $widget : 'entityreference_autocomplete',
  );

  $form['widget_type'] = array(
    '#type' => 'radios',
    '#title' => t('Form element type'),
    '#description' => t('The type of display and how terms are selected when adding / editing a post.'),
    '#default_value' => in_array($widget, array('entityreference_autocomplete', 'entityreference_autocomplete_tags')) ? 'entityreference_autocomplete' : $widget,
    '#options' => array(
      'entityreference_autocomplete' => t('Autocomplete'),
      'options_select' => t('Select list'),
      'options_buttons' => t('Check boxes / Radio buttons'),
    ),
    '#dependency' => array('radio:widget_type_autocomplete' => array('entityreference_autocomplete')),

  );

  $form['cardinality'] = array(
    '#type' => 'select',
    '#title' => t('Max number of terms per post'),
    '#options' => array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + drupal_map_assoc(range(1, 10)),
    '#default_value' => $cardinality,
  );
}

/**
 * Implements hook_form_alter().
 *
 * Using the hook_form_alter and not hook_form_FORM_ID_alter due to the
 * invokes order of the hooks.
 */
function vsite_vocab_form_alter(&$form, $form_state, $form_id) {
  if (!in_array($form_id, array('taxonomy_form_vocabulary', 'taxonomy_overview_terms')) || !$context = og_vocab_is_group_admin_context()) {
    return;
  }
  $form['#submit'][] = 'vsite_vocab_redirect_to_group_vocabularies';
}

/**
 * After deleting the group vocabulary, redirect to the taxonomy group admin
 * page.
 */
function vsite_vocab_redirect_to_group_vocabularies($form, &$form_state) {
  $form_state['redirect'] = 'cp/build/taxonomy';

  if ($form['#form_id'] == 'taxonomy_overview_terms' && !empty($form_state['confirm_reset_alphabetical']) && !empty($form_state['complete form']['machine_name']['#value'])) {
    // Redirect back to the terms overview, after "Reset alphabetical"
    // was submitted.
    $form_state['redirect'] .= '/' . $form_state['complete form']['machine_name']['#value'] . '/list';
  }
}

/**
 * Validate handler; Set the machine name of the vocabulary.
 */
function vsite_vocab_form_taxonomy_form_vocabulary_validate($element, &$form_state) {
  // Manually create the machine name.
  $machine_name = strtolower($form_state['values']['name']);
  $machine_name = substr(preg_replace('@[^a-z0-9_]+@', '', $machine_name), 0, 32);

  // Start iterating over machine names until we hit one that doesn't
  // exist yet.
  $i = 1;
  while (taxonomy_vocabulary_machine_name_load($machine_name)) {
    $machine_name = substr($machine_name, 0, 32 - strlen($i)) . $i;
    ++$i;
  }
  form_set_value($element, $machine_name, $form_state);
}

/**
 * Implements hook_field_attach_view_alter().
 */
function vsite_vocab_field_attach_view_alter(&$output, $context) {
  if (empty($output[OG_VOCAB_FIELD][0]['#markup'])) {
    return;
  }
  $original = $output[OG_VOCAB_FIELD][0]['#markup'];

  if (count($output[OG_VOCAB_FIELD]['#items']) > 3) {
    // Show links collapsed.
    $output[OG_VOCAB_FIELD][0]['#markup'] = '<a href="#" class="toggle" >' . t('in terms') . '</a><div class="slider">'. $original .'</div>';

    $output['#attached']['js'][] = drupal_get_path('module', 'os').'/theme/os_toggle.js';
  }
  else {
    $output[OG_VOCAB_FIELD][0]['#markup'] = t('In !terms', array('!terms' => $original));
  }
}

/**
 * Implements hook_og_vocab_is_admin_context().
 */
function vsite_vocab_og_vocab_is_admin_context() {
  $item = menu_get_item();
  if (strpos($item['path'], 'cp/build/taxonomy') === 0) {
    $space = spaces_get_space();
    return array('group_type' => 'node', 'gid' => $space->id);
  }
}

/**
 * Custom submit handler: handling the custom form submit of os_vocab.
 *
 * The original OG vocabularies set the $og_vocab in the form elements and use
 * them in his submit handler. OS vocab doesn't use the original form elements,
 * therefore we implements both of the logics in this submit handler.
 *
 * @see og_vocab_form_taxonomy_form_vocabulary_submit().
 */
function vsite_vocab_form_taxonomy_form_vocabulary_submit(&$form, &$form_state) {
  $vid = empty($form_state['vocabulary']->vid) ? 0 : $form_state['vocabulary']->vid;
  $bundles = os_get_bundles(array(1,2));
  $values = $form_state['values'];

  foreach ($bundles as $bundle => $bundle_label) {
    $og_vocab = og_vocab_load_og_vocab($vid, 'node', $bundle);

    if (empty($og_vocab)) {
      $og_vocab = og_vocab_create_og_vocab($vid, 'node', $bundle);
    }

    if (!$form_state['values']['bundles'][$bundle] && empty($og_vocab->is_new)) {
      $og_vocab->delete();
      continue;
    }

    if ($form_state['values']['bundles'][$bundle]) {
      $og_vocab->settings['required'] = $values['required'];
      $og_vocab->settings['cardinality'] = $values['cardinality'];
      $values['widget_type'] = $values['widget_type_autocomplete'] == 'entityreference_autocomplete' ? $values['widget_type'] : $values['widget_type_autocomplete'];
      $og_vocab->settings['widget_type'] = $values['widget_type'];
      $og_vocab->save();
    }
  }

  // Change the destination of the page after submiting the form.
  $_GET['destination'] = 'cp/build/taxonomy/';
}

/**
 * Override theme_taxonomy_overview_vocabularies() to change the actions path.
 *
 * Changing the links path of the vocabulry CRUD operations.
 *
 * @see theme_og_vocab_taxonomy_overview_vocabularies().
 */
function vsite_vocab_preprocess_taxonomy_overview_vocabularies(&$variables) {
  foreach (array_keys($variables['form']) as $element_key) {
    // Each row in the table have an integer key, therefor processing only
    // integer keys.
    if (!is_integer($element_key)) {
      continue;
    }

    $element = &$variables['form'][$element_key];
    $element['list']['#href'] = 'cp/build/taxonomy/' . $element['#vocabulary']->machine_name;
    $element['add']['#href'] = 'cp/build/taxonomy/' . $element['#vocabulary']->machine_name . '/add';
    $element['edit']['#href'] = 'cp/build/taxonomy/' . $element['#vocabulary']->machine_name . '/edit';
  }
}

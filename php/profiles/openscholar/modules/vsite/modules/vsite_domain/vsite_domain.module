<?php
// $Id$


/**
 * @file
 * Creates a domain handler that overides the default purl domain handler.
 *
 * Also provides admin form for creating domains for vsites.
 */

// Change the default domain proccessor to our custom processor
define('PURL_VSITE_DOMAIN', 'vsite_domain');

// Change the default domain proccessor to our custom processor
define('PURL_VSITE_PATH', 'vsite_path');

/**
 * Implements hook_init().
 *
function vsite_domain_init() {

  // Only runs this init function once per page load.
  static $vsite_domain_check;
  if (isset($vsite_domain_check)) {
    return;
  }
  $vsite_domain_check = TRUE;

  // Checks to make sure we are in a vsite space.
  $vsite = vsite_get_vsite();
  if (!$vsite) {
    return;
  }

  // Only continues if the vsite has a custom domain name.
  if (!isset($vsite->controllers->variable->values['space']['vsite_domain_name'])
    || empty($vsite->controllers->variable->values['space']['vsite_domain_name'])
  ) {
    return;
  }

  // Gets the vsite's pURL to compare to the current Drupal menu path.
  $purl = vsite_get_purl($vsite);
  if (empty($purl)) {
    return;
  }

  // If the first item in the path is the pURL, redirect away.
  $request_path = request_path();
  $request_path_args = explode('/', $request_path);
  $index = array_shift($request_path_args);
  if (!empty($request_path_args) && ((string) $index === (string) $purl)) {
    $path_without_purl = implode('/', $request_path_args);
    drupal_goto($path_without_purl);
  }
}*/

/**
 * Implements hook_enable().
 */
function vsite_domain_enable() {
  global $base_url;

  // Configure purl, grab OG method, replace path with vsite_path
  $purl_types = variable_get('purl_types', array());
  if (variable_get('purl_method_spaces_og', FALSE)) {
    //Remove standard path processing
    if (isset($purl_types['path'])) {
      unset($purl_types['path']);
    }
    //Remove standard domain processing
    if (isset($purl_types['domain'])) {
      unset($purl_types['domain']);
    }

    //Add new domain and path processing
    $purl_types['vsite_domain'] = 'vsite_domain';
    $purl_types['vsite_path'] = 'vsite_path';
    variable_set('purl_types', $purl_types);

    variable_set('purl_method_spaces_og', 'vsite_path');
    variable_set('purl_method_vsite_domain', 'vsite_domain');
  }

  //Domain should be set to correct base, so that it does not change when domain providers are used
  if (!variable_get('purl_base_domain', FALSE)) {
    variable_set('purl_base_domain', $base_url);
  }

  // Weight vsite_domain to be after Spaces OG
  $weight = db_query("SELECT weight FROM {system} WHERE type = :type AND name = :name", array(
      ':type' => 'module',
      ':name' => 'spaces_og',
    ))->fetchField();

  db_update('system')->fields(array(
      'weight' => ($weight + 1),
    ))->condition('name', 'vsite_domain')->execute();
}

/**
 * Implements hook_perm().
 *
 * Add new permissions for managing domains witin a vsite
 */
function vsite_domain_permission() {
  return array(
    'change vsite domain' => array(
      'title' => t('Change vsite domain'),
      'description' => t('Change vsite domain'),
    ),
  );
}

/**
 * Implements hook_purl_provider().
 *
 * This provides the domain provider for vsite's
 */
function vsite_domain_purl_provider() {
  $items = array();
  $items['vsite_domain'] = array(
    'name' => 'VSite Domain Provider',
    'description' => t('Sets the spaces context for a domain match.'),
    'callback' => 'vsite_domain_apply_context',
    'callback arguments' => array(
      'og',
    ),
    'example' => 'my-space',
  );

  return $items;
}

/**
 * Callback to activate the current space, using a domain provider
 */
function vsite_domain_apply_context($space_type, $sid) {
  static $once;
  if (empty($once)) {
    spaces_init_space($space_type, $sid);
    $space = spaces_get_space();
    $space->purl_provider = PURL_VSITE_DOMAIN;
    $once = TRUE;
  }
}

/**
 * Context prefix provider callback.
 */
function vsite_domain_purl_processor() {
  $info = array();
  $info['vsite_domain'] = array(
    'title' => t('Scholar Vsite Domain Modifier'),
    'handler' => array(
      'class' => 'purl_vsite_domain',
      'file' => 'purl_vsite_domain.inc',
      'path' => drupal_get_path('module', 'vsite_domain') . '/plugins',
      'parent' => 'domain',
    ),
  );
  $info['vsite_path'] = array(
    'title' => t('Scholar Vsite Path Modifier'),
    'handler' => array(
      'class' => 'purl_vsite_path',
      'file' => 'purl_vsite_path.inc',
      'path' => drupal_get_path('module', 'vsite_domain') . '/plugins',
      'parent' => 'path',
    ),
  );

  return $info;
}

/**
 * Implements cp_settings().
 *
 * @return array
 *
 * @todo Form to set domain
 */
function vsite_domain_cp_settings() {
  $settings = array();
  $space = spaces_get_space();
  if (!empty($space)) {
    // If vsite_domain has been enabled as a purl type then add the form to manage it
    // This check is here in case another module disables this or in case strongarm has
    // not initilized the variable yet.
    if (in_array('vsite_domain', array_keys(variable_get('purl_types', array())))) {
      if (db_query('SELECT id FROM {purl} WHERE id = :id AND provider = :provider', array(':id' => $space->group->nid, ':provider' => 'vsite_domain'))->fetchField()) {
        $vsite_domain_proessing_value = 0;
      }
      else {
        $vsite_domain_proessing_value = 1;
      }

      $vsite_domain = variable_get('vsite_domain_name', '');
      // Wrap the entire form addition in the user_access check.
      if (user_access('change vsite domain')) {
        $settings['vsite_domain_name'] = array(
          'group' => array(
            '#id' => 'domain',
            '#title' => t('Domain'),
            '#weight' => 0,
          ),
          'form' => purl_form('vsite_domain', $space->group->nid, $vsite_domain),
          'submit' => array('vsite_domain_cp_settings_domain_submit'),
        );

        //Set the title since purl does not give you control over this
        $settings['vsite_domain_name']['form']['value']['#title'] = "Your Sites Custom Domain";
        // Not required
        $settings['vsite_domain_name']['form']['value']['#required'] = FALSE;
        // Use our validate function
        $settings['vsite_domain_name']['form']['#element_validate'] = array('vsite_domain_cp_settings_domain_validate');
        $settings['vsite_domain_name']['form']['#access'] = user_access('change vsite domain');

        $settings['vsite_domain_name']['form']['vsite_domain_proccessing'] = array(
          '#type' => 'radios',
          '#title' => t('Domain Type'),
          '#default_value' => $vsite_domain_proessing_value,
          '#options' => array(t('Domain Owner'), t('Domain Group')),
          '#weight' => -20,
          '#description' => "Is your site the only one that uses this domain or is it one site of several that share the domain?",
        );
      }
    }
  }
  return $settings;
}

/**
 * Validate function for handling the vsite_domain generic setting
 *
 * @param $space vsite
 * @param $value array
 */
function vsite_domain_cp_settings_domain_validate($form) {
  if (strlen($form['value']['#value'])) {
    return purl_form_validate($form);
  }

  return TRUE;
}

/**
 * Submit function for handdling the vsite_domain generic setting
 *
 * @param $space vsite
 * @param $value array
 */
function vsite_domain_cp_settings_domain_submit(&$form, &$form_state) {
  $value = &$form_state['values'];
  if (is_array($value['vsite_domain_name'])) {
    $modifier = array(
      'provider' => $value['vsite_domain_name']['provider'],
      'id' => $value['vsite_domain_name']['id'],
      'value' => $value['vsite_domain_name']['value'],
    );

    if (strlen($modifier['value']) && $value['vsite_domain_name']['vsite_domain_proccessing'] == 0) {
      // Save the new purl if valid.
      if (purl_validate($modifier)) {
        $id = db_query('SELECT id FROM {purl} WHERE id = :id AND provider = :provider', array(':id' => $modifier['id'], ':provider' => $modifier['provider']))->fetchField();
        if (!empty($id)) {
          // UPDATE
          drupal_write_record('purl', $modifier, array('provider', 'id'));
        }
        else {
          // CREATE
          drupal_write_record('purl', $modifier);
        }
      }
    }
    else {
      // Delete an old purl.
      purl_delete($modifier);
    }
  }
  $value['vsite_domain_name'] = $value['vsite_domain_name']['value'];
}

/**
 * Maintain a array of purl's that have been processed, only one vsite_provider should adjust each path
 *
 * @param string $purl
 *
 * @ingroup private
 */
function _vsite_domain_processed_purls($purl = FALSE) {
  static $processed;

  if (!isset($processed)) {
    $processed = array();
  }

  if (strlen($purl)) {
    $processed[$purl] = $purl;
  }

  return $processed;
}


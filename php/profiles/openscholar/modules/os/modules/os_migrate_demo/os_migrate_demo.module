<?php


/**
 * Implements hook_migrate_api().
 */
function os_migrate_demo_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}

/**
 * Attach a block to region on OS.
 *
 *  @param $nid
 *    The node id of the site.
 *  @param @box
 *    The human name of the widget.
 *  @param $page
 *    The human name for the page for attaching the widget to.
 *  @param $region
 *    The machine name of the region, optional.
 *
 *  @return
 *    A CSV string contain the widget plugin, the delta of the box/block, and
 *    the context page mapping.
 *    If the function called from CLI the function will print the string.
 */
function os_migrate_demo_set_box_in_region($nid, $box, $page, $region = 'sidebar_second') {
  ctools_include('layout', 'os');
  // Mapping for all the pages.
  $page_mapping = array(
    'News' => 'news_news',
    'Blog' => 'blog_blog',
    'Bio' => 'biocv_biocv',
    'Link' => 'links_links',
    'Reader' => 'reader_reader',
    'Calendar' => 'events_events',
    'Classes' => 'classes_classes',
    'People' => 'profiles_profiles',
    'Data' => 'dataverse_dataverse',
    'Galleries' => 'gallery_gallery',
    'Software' => 'software_software',
    'Documents' => 'booklets_booklets',
    'Publications' => 'publications_publications',
    'Presentations' => 'presentations_presentations',
  );

  // Mapping widgets we want to tests. The array build in the format of:
  //  The key hold the mapped name for the widget
  //  If this is a block, the value will be MODULE-BLOCK_DELTA-BLOCK.
  $boxes_mapping = array(
    'Filter by term' => 'os_taxonomy_fbt',
    'Simple view list' => 'os_sv_list_box',
    'Search' => 'os_search_db-site-search',
    'Active book TOC' => 'os_boxes_booktoc',
    'Bio' => 'os_boxes_bio',
    'RSS feed' => 'os_boxes_rss',
    'Image gallery' => 'os_boxes_slideshow',
  );

  $contexts = array(
    $page_mapping[$page],
    'os_public',
  );

  $blocks = os_layout_get_multiple($contexts, FALSE, TRUE);

  // Changing the region differently for box and block.
  if (empty($blocks[$boxes_mapping[$box]])) {
    // Define the box.
    $options = array(
      'delta' => 'box-' . strtolower(str_replace(" ", "-", $box)),
      'title' => $box,
      'description' => $box,
    );

    // Create the box.
    $box = boxes_box::factory($boxes_mapping[$box], $options);
    $box->save();
    $blocks['boxes-' . $box->delta]['region'] = $region;

    // Initialize the module ad the delta.
    if (!array_key_exists($blocks['boxes-' . $box->delta], array('module', 'delta'))) {
      $blocks['boxes-' . $box->delta]['delta'] = $options['delta'];
      $blocks['boxes-' . $box->delta]['module'] = 'boxes';
    }

    $stringToPrint = $box->plugin_key . ',' . $options['delta'] . ',' . $page_mapping[$page];
  }
  else {
    $blocks[$boxes_mapping[$box]]['region'] = $region;
    $stringToPrint = $boxes_mapping[$box] . ',' . $options['delta'] . ',' . $page_mapping[$page];
  }

  // Save the widget in the region.
  $vsite = spaces_load('og', $nid);
  $vsite->controllers->context->set($contexts[0] . ":reaction:block", array(
    'blocks' => $blocks,
  ));

  // Data that relate to the box we added and used in the end of the scenario.
  if (drupal_is_cli()) {
    print($stringToPrint);
  }
  else {
    return $stringToPrint;
  }
}

/**
 * Hide the box. If the box is not exported, the function will delete the box.
 *
 *  @param $nid
 *    The node id of the site.
 *  @param $plugin
 *    The box plugin name from the mapped boxes.
 *  @param $delta
 *    The delta of the box.
 *  @param $page
 *    The machine name page from the mapped pages.
 *
 *  @see os_migrate_demo_set_box_in_region().
 */
function os_migrate_demo_hide_box($nid, $plugin, $delta, $page) {
  // Hide the box.
  ctools_include('layout', 'os');
  $contexts = array(
    $page,
    'os_public',
  );
  $blocks = os_layout_get_multiple($contexts, FALSE, TRUE);

  if (empty($blocks[$plugin])) {
    $blocks['boxes-' . $delta]['region'] = FALSE;
    // Delete the box.
    $box = boxes_box::factory($plugin, array());
    $box->delete();
  }
  else {
    $blocks[$plugin]['region'] = FALSE;
  }

  $vsite = spaces_load('og', $nid);
  $vsite->controllers->context->set($page . ":reaction:block", array(
    'blocks' => $blocks,
  ));
}

/**
 * Tag node to term.
 *
 *  @param $title
 *    The title of the node.
 *  @param $name
 *    The name of the term.
 *  @param $type
 *    The type of the node. Optional, default is class.
 */
function os_migrate_demo_assign_node_to_term($title, $name, $type = 'class') {
  $query = new entityFieldQuery();

  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('title', $title)
    ->propertyCondition('type', $type)
    ->execute();

  $nid = reset($result['node'])->nid;

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('name', $name)
    ->execute();

  $tid = reset($result['taxonomy_term'])->tid;

  $wrapper = entity_metadata_wrapper('node', $nid);
  $wrapper->{OG_VOCAB_FIELD}->set(array($tid));
  $wrapper->save();
}


<?php

/**
 * @file os_mailchimp.module
 *
 * OS MailChimp module
 * Jon Sagotsky
 *
 * Subscribes new OS registrations to mailchimp
 * Provides boxes for vsites to add their own mailing lists
 */

/**
 * Implements hook_menu().
 *
 * Admin menu for setting site api key and mailing list.
 * Ajax url for processing sub requests.  (using ajax so I can have one unified sub function).
 */
function os_mailchimp_menu() {
  $items ['admin/settings/os_mailchimp'] = array(
    'title' => t( 'MailChimp' ),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('os_mailchimp_admin' ),
	'file' => 'os_mailchimp.admin.inc',
	'access arguments' => array('access administration pages' ),
  );
  $items['os_mailchimp/%ctools_js/subscribe/%'] = array(
    'title' => t('Subscribe to mailing list'),
    'page callback' => 'os_mailchimp_subscribe_page',
    'page arguments' => array(1,3),
    //'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
 *
 * Implements hook_user_insert().
 * On new registration of users, grabs
 * their email and name and subscribes them to
 * the global MailChimp mailing list.
 */
function os_mailchimp_user_insert(&$edit, $account, $category) {
  $api = variable_get('os_mailchimp_api', FALSE);
  $list = variable_get('os_mailchimp_list', FALSE);

  $dc = end(explode('-', $api));
  $url = 'http://' . $dc . '.api.mailchimp.com/1.3/';

  $sub = os_mailchimp_subscribe($api, $list, $edit['mail'], $edit['name']);
}


/**
 * Implemens of hook_boxes_plugins().
 */
function os_mailchimp_boxes_plugins(){
  $info = array();
  $path = drupal_get_path('module', 'os_mailchimp') . '/plugins';
  $css = drupal_get_path('module', 'os_mailchimp') . '/theme/os-mailchimp.css';

  $info['os_boxes_mailchimp'] = array(
    'title' => 'Mailing List',
    'description' => 'Lets users subscribe to your MailChimp mailing list',
    'css' => $css,
    'tags' => array(
      'Social'
    ),
    'handler' => array(
      'class' => 'os_boxes_mailchimp',
      'file' => 'os_mailchimp_box.inc',
      'path' => $path,
      'parent' => 'os_boxes_default'
    )
  );

  return $info;

}

/**
 * Page displays subscribe form for ctools modal.
 */
function os_mailchimp_subscribe_page($js=TRUE, $delta) {
  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Title of my form'),
    'ajax' => $js,
    'delta' => $delta,
    'use_ctools' => TRUE,
  );

  $output = ctools_modal_form_wrapper('os_mailchimp_form', $form_state);

  ctools_modal_render('Mailing List Subscription', $output);
}

/**
 * @function os_mailchimp_subscribe()
 * Subscribe a user to a mailing list.
 *
 * @param $api	mailchimp api key
 * @param $list	list to subscribe to
 * @param $email email address to subscribe
 * @param $fn  user's firstname (optional)
 * @param $ln  user's lastname (optional)
 */
function os_mailchimp_subscribe($api, $listid, $email, $fn=NULL, $ln=NULL) {
  include_once( drupal_get_path('module', 'os_mailchimp') . '/MCAPI.class.php');
  $MC = new MCAPI($api);

  if ($MC->listSubscribe($listid, $email)) {
    return array('success'=>TRUE);
  } else {
  	return array('success'=>FALSE,'msg'=>$MC->errorMessage);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function os_mailchimp_ctools_plugin_api() {
  list($module, $api) = func_get_args();

  if ($module == "boxes" && $api == "box") {
    return array("version" => 1);
  }
}

/**
 * Implements hook_default_box().
 */
function os_mailchimp_default_box() {
  $export = array();

  $box = new stdClass;
  $box->disabled = FALSE; /* Edit this to true to make a default box disabled initially */
  $box->api_version = 1;
  $box->delta = 'os_box_mailchimp';
  $box->plugin_key = 'os_boxes_mailchimp';
  $box->title = '';
  $box->description = 'Subscribe to MailChimp mailing list';
  $box->options = array(
    'visibility' => 'feature',
    'api' => variable_get('os_mailchimp_api', FALSE),
    'list' => variable_get('os_mailchimp_list', FALSE),
    'text' => 'Subscribe to our mailing list',
    'display' => 'link',
  );
  $export['os_box_mailchimp'] = $box;
  return $export;
}

/**
 * @function os_mailchimp_form
 *
 * Builds the form mailchimp_box uses to collect email addresses
 * the other hook_form functions use this as their base form.
 */
function os_mailchimp_form($state, $args=array()) {
  $state += $args; //drupal_get_form can't pass a state, but needs to send the box delta

  // Initialize the variables.
  $mail = '';
  $ln = '';
  $fn = '';

  // Swap to spaces_get_space.
  $space = spaces_get_space();

  // Hardcoded the path into the delta due to d7 returning form args this way.
  // Check to see if they're using the form or link display.
  if(isset($state['build_info']['args'][0]['delta'])) { // form
    $box = $space->controllers->boxes->get($state['build_info']['args'][0]['delta']);
  }else{ // everything else
    $box = $space->controllers->boxes->get($state['delta']);
  }

  global $user;

  // Check for a logged in user.
  if ($user->uid != 0) {
    // Get their email.
  	$mail = $user->mail;
  	// At first, set their first name to their username
  	// assuming we haven't yet added custom fields to the user account.
  	$fn = $user->name;
  	// Check if new fields have been added
    $userLoad = user_load($user->uid);

    // Check for a first name
    if(!empty($userLoad->field_first_name['und'][0]['value'])) {
      $fn = $userLoad->field_first_name['und'][0]['value'];
    }

    // Check for a last name
  	if(!empty($userLoad->field_last_name['und'][0]['value'])) {
      $ln = $userLoad->field_last_name['und'][0]['value'];
  	}
  }

  $form = array();
  $form['subscribe'] = array(
   	'#type' => 'fieldset',
    '#title' => check_plain($box->options['text']),
  );

  $form['subscribe']['email'] = array(
    '#type' =>  'textfield',
	'#title' => 'Email Address',
	'#weight' => -10,
	'#required' => TRUE,
	'#default_value' => $mail,
  );

  $form['subscribe']['fn'] = array(
    '#type' =>  'textfield',
	'#title' => 'First Name',
	'#weight' => -8,
	'#default_value' => $fn,
  );

  $form['subscribe']['ln'] = array(
    '#type' =>  'textfield',
	'#title' => 'Last Name',
	'#weight' => -6,
	'#default_value' => $ln,
  );

  $form['subscribe']['submit'] = array(
    '#type' => 'submit',
	'#value' => 'Subscribe',
	'#weight' => -4,
  );

  $form['subscribe']['list'] = array(
    '#type' => 'value',
	'#value' => $box->options['list'],
  );

  return $form;
}

/**
 * Submit function for os_mailchimp_form.
 */
function os_mailchimp_form_submit($form, $form_state) {
  $v = $form_state['values'];

  // Get the api key.
  if(($space = spaces_get_space()) != FALSE) {
    $api = $space->controllers->variable->get('os_mailchimp_api', 'space');
  } else {
    $api = variable_get('os_mailchimp_api', '');
  }

  // Try to subscribe.
  $sub = os_mailchimp_subscribe($api, $v['list'], $v['email'], $v['fn'], $v['ln']);
  // Get the return message/status.
  if ($sub['success']) {
    $msg = t("Thank you for subscribing to our mailing list.  You will recieve an email to confirm your subscription shortly.");
    $status = 'status';
  } else {
    // Display the error.  Make sure that next form send will work - it has a tendency to drop $list and $api...
    $msg = t('Error subscribing: ' . $sub['msg']);
    $status = 'error';
  }

  // Pass message and status back to user interactively or on next page depending on how they got here.
  // Ctools no longer supports the ctools_ajax_render so in order to push the result message back to the user.
  // I'm using the commnd_display function...
  if (isset($form_state['use_ctools']) && $form_state['use_ctools']) {
  	$commands = array();
  	// dismiss the window
  	$commands[] = ctools_modal_command_dismiss();
    // dismiss any current messages
    $commands[] = ajax_command_remove('#messages');
    // return the new message
  	$commands[] = ajax_command_before('#columns', '<div id="messages" class="'.$status.'">' . $msg . '</div>');
  	print ajax_render($commands);

    exit;
  } else {
    drupal_set_message($msg, $status);
  }
}

/**
 * Implements hook_cp_settings().
 * @return array
 */
function os_mailchimp_cp_settings(){
  $a_settings = array();

  $space = spaces_get_space();
  if(($space = spaces_get_space()) != FALSE) {
    $api = $space->controllers->variable->get('os_mailchimp_api', 'space');
  } else {
    $api = variable_get('os_mailchimp_api', '');
  }
  $a_settings['os_mailchimp_api'] = array(
    'group' => array(
      '#id' => 'social',
      '#title' => t('Social'),
      '#weight' => 0,
  ),
    'form' => array(
      '#type' => 'textfield',
      '#title' => t('MailChimp API Key'),
      '#default_value' => $api,
      '#description' => 'Your <a href="https://us1.admin.mailchimp.com/account/api-key-popup" target="_new">MailChimp API key</a>.  Example: 1234567890abcefghijklmnopqrstuvwx-us2',
    )
  );

  return $a_settings;
}


/**
 * @function _os_mailchimp_get_lists
 *
 * given an api key, returns a list of id => list name for all lists owned by that key
 * @param unknown_type $api
 */
function _os_mailchimp_get_lists($api) {
  include_once( drupal_get_path('module', 'os_mailchimp') . '/MCAPI.class.php');

  $MC = new MCAPI($api);

  $ret = array();
  if (($lists = $MC->lists()) != FALSE) {
    foreach ($lists['data'] as $delta => $list) {
	  $ret[$list['id']] = $list['name'];
	}

    return $ret;

  } else {
    return FALSE;
  }
}
